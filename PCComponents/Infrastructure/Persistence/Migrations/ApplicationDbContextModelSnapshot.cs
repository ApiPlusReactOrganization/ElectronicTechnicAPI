// <auto-generated />
using System;
using Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0-rc.2.24474.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CaseFormFactor", b =>
                {
                    b.Property<Guid>("CasesId")
                        .HasColumnType("uuid")
                        .HasColumnName("cases_id");

                    b.Property<Guid>("FormFactorsId")
                        .HasColumnType("uuid")
                        .HasColumnName("form_factors_id");

                    b.HasKey("CasesId", "FormFactorsId")
                        .HasName("pk_case_form_factors");

                    b.HasIndex("FormFactorsId")
                        .HasDatabaseName("ix_case_form_factors_form_factors_id");

                    b.ToTable("CaseFormFactors", (string)null);
                });

            modelBuilder.Entity("Domain.FormFactors.FormFactor", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_form_factors");

                    b.ToTable("form_factors", (string)null);
                });

            modelBuilder.Entity("Domain.Manufacturers.Manufacturer", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_manufacturers");

                    b.ToTable("manufacturers", (string)null);
                });

            modelBuilder.Entity("Domain.ProductMaterials.ProductMaterial", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_product_materials");

                    b.ToTable("product_materials", (string)null);
                });

            modelBuilder.Entity("Domain.Products.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)")
                        .HasColumnName("discriminator");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric")
                        .HasColumnName("price");

                    b.Property<int>("StockQuantity")
                        .HasColumnType("integer")
                        .HasColumnName("stock_quantity");

                    b.HasKey("Id")
                        .HasName("pk_products");

                    b.ToTable("products", (string)null);

                    b.HasDiscriminator().HasValue("Product");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("ProductProductMaterial", b =>
                {
                    b.Property<Guid>("ProductMaterialsId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_materials_id");

                    b.Property<Guid>("ProductsId")
                        .HasColumnType("uuid")
                        .HasColumnName("products_id");

                    b.HasKey("ProductMaterialsId", "ProductsId")
                        .HasName("pk_product_product_materials");

                    b.HasIndex("ProductsId")
                        .HasDatabaseName("ix_product_product_materials_products_id");

                    b.ToTable("ProductProductMaterials", (string)null);
                });

            modelBuilder.Entity("Domain.Cases.Case", b =>
                {
                    b.HasBaseType("Domain.Products.Product");

                    b.Property<string>("CoolingSystem")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("cooling_system");

                    b.Property<Guid>("ManufacturerId")
                        .HasColumnType("uuid")
                        .HasColumnName("manufacturer_id");

                    b.Property<int>("NumberOfFans")
                        .HasColumnType("integer")
                        .HasColumnName("number_of_fans");

                    b.HasIndex("ManufacturerId")
                        .HasDatabaseName("ix_products_manufacturer_id");

                    b.HasDiscriminator().HasValue("Case");
                });

            modelBuilder.Entity("CaseFormFactor", b =>
                {
                    b.HasOne("Domain.Cases.Case", null)
                        .WithMany()
                        .HasForeignKey("CasesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_case_form_factors_cases_cases_id");

                    b.HasOne("Domain.FormFactors.FormFactor", null)
                        .WithMany()
                        .HasForeignKey("FormFactorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_case_form_factors_form_factors_form_factors_id");
                });

            modelBuilder.Entity("ProductProductMaterial", b =>
                {
                    b.HasOne("Domain.ProductMaterials.ProductMaterial", null)
                        .WithMany()
                        .HasForeignKey("ProductMaterialsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_product_product_materials_product_materials_product_materials");

                    b.HasOne("Domain.Products.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_product_product_materials_products_products_id");
                });

            modelBuilder.Entity("Domain.Cases.Case", b =>
                {
                    b.HasOne("Domain.Manufacturers.Manufacturer", "Manufacturer")
                        .WithMany("Cases")
                        .HasForeignKey("ManufacturerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_products_manufacturers_manufacturer_id");

                    b.Navigation("Manufacturer");
                });

            modelBuilder.Entity("Domain.Manufacturers.Manufacturer", b =>
                {
                    b.Navigation("Cases");
                });
#pragma warning restore 612, 618
        }
    }
}
