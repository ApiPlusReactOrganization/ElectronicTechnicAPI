// <auto-generated />
using System;
using Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241215160247_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CategoryManufacturer", b =>
                {
                    b.Property<Guid>("CategoriesId")
                        .HasColumnType("uuid")
                        .HasColumnName("categories_id");

                    b.Property<Guid>("ManufacturersId")
                        .HasColumnType("uuid")
                        .HasColumnName("manufacturers_id");

                    b.HasKey("CategoriesId", "ManufacturersId")
                        .HasName("pk_categories_manufacturers");

                    b.HasIndex("ManufacturersId")
                        .HasDatabaseName("ix_categories_manufacturers_manufacturers_id");

                    b.ToTable("categories_manufacturers", (string)null);
                });

            modelBuilder.Entity("Domain.Authentications.Roles.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_roles");

                    b.ToTable("roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "User",
                            Name = "User"
                        },
                        new
                        {
                            Id = "Administrator",
                            Name = "Administrator"
                        });
                });

            modelBuilder.Entity("Domain.Authentications.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)")
                        .HasColumnName("name");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.ToTable("users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("82601646-59b1-453b-8eb9-a9e93ec366ad"),
                            Email = "admin@example.com",
                            Name = "admin",
                            PasswordHash = "hF13Z2jEfaeNXx+hHlFJXw==:GhSGQd86QK0O+hKTklFUGBQWteCpHNWjWhP9i2zJE5Y="
                        },
                        new
                        {
                            Id = new Guid("f5c43cd7-16e7-4740-8ad0-4b779b55e1be"),
                            Email = "user@example.com",
                            Name = "user",
                            PasswordHash = "q0nJWhgHnDiF3PvUC2XyIw==:eacjnCooyVBdP3FgIs7Ug15lB3+hFXXWgdyMVCpcTNI="
                        });
                });

            modelBuilder.Entity("Domain.Authentications.Users.UserImage", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("file_path");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_image");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasDatabaseName("ix_user_image_user_id");

                    b.ToTable("user_image", (string)null);
                });

            modelBuilder.Entity("Domain.CartItems.CartItem", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("IsFinished")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_finished");

                    b.Property<Guid?>("OrderId")
                        .HasColumnType("uuid")
                        .HasColumnName("order_id");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_cart_items");

                    b.HasIndex("OrderId")
                        .HasDatabaseName("ix_cart_items_order_id");

                    b.HasIndex("ProductId")
                        .HasDatabaseName("ix_cart_items_product_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_cart_items_user_id");

                    b.ToTable("cart_items", (string)null);
                });

            modelBuilder.Entity("Domain.Categories.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_categories");

                    b.ToTable("categories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("8190ee41-7386-4e08-bc39-9a8e3ca8e13c"),
                            Name = "Processor"
                        },
                        new
                        {
                            Id = new Guid("e06a20b0-0851-4eee-8f78-9554dbddc33d"),
                            Name = "Computer case"
                        },
                        new
                        {
                            Id = new Guid("e471c6bb-5a41-4b92-8f24-09d01e4694db"),
                            Name = "Graphics Card"
                        },
                        new
                        {
                            Id = new Guid("476c2150-8afc-46a8-bdd9-dabd4c353f3d"),
                            Name = "RAM"
                        },
                        new
                        {
                            Id = new Guid("06c36991-a3fd-4d57-bb33-da21cc59b4d6"),
                            Name = "Power Supply Unit"
                        },
                        new
                        {
                            Id = new Guid("5a425099-b096-4626-8c78-b0dab057df20"),
                            Name = "Motherboard"
                        },
                        new
                        {
                            Id = new Guid("9ab84632-31e4-41c9-bff2-35c949e04004"),
                            Name = "Cooler"
                        },
                        new
                        {
                            Id = new Guid("960c1d92-1f9f-4cfd-8f51-936a0a4ca987"),
                            Name = "HDD"
                        },
                        new
                        {
                            Id = new Guid("1fad116e-3706-4001-b300-5f5bbed712ec"),
                            Name = "SSD"
                        });
                });

            modelBuilder.Entity("Domain.Manufacturers.Manufacturer", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_manufacturers");

                    b.ToTable("manufacturers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("5def8f84-5810-4938-9552-2db9d7ada9ca"),
                            Name = "Intel Corporation"
                        },
                        new
                        {
                            Id = new Guid("3d1093e1-e23e-4be5-a17f-6c0b10b2484a"),
                            Name = "NVIDIA Corporation"
                        },
                        new
                        {
                            Id = new Guid("90c1b925-691a-4bb5-868f-7a8629dc25a3"),
                            Name = "Corsair Gaming, Inc."
                        },
                        new
                        {
                            Id = new Guid("62886aae-f858-4606-9618-0a9e9cb91c69"),
                            Name = "Seagate Technology"
                        },
                        new
                        {
                            Id = new Guid("f3f33597-229c-4179-9ab9-607e75289eac"),
                            Name = "Cooler Master Technology Inc."
                        });
                });

            modelBuilder.Entity("Domain.Orders.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("timezone('utc', now())");

                    b.Property<string>("DeliveryAddress")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("delivery_address");

                    b.Property<string>("StatusId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status_id");

                    b.Property<decimal>("TotalPrice")
                        .HasPrecision(9, 2)
                        .HasColumnType("numeric(9,2)")
                        .HasColumnName("total_price");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_orders");

                    b.HasIndex("StatusId")
                        .HasDatabaseName("ix_orders_status_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_orders_user_id");

                    b.ToTable("orders", (string)null);
                });

            modelBuilder.Entity("Domain.Orders.Status", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_statuses");

                    b.ToTable("statuses", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "Processing",
                            Name = "Processing"
                        },
                        new
                        {
                            Id = "Delivered",
                            Name = "Delivered"
                        });
                });

            modelBuilder.Entity("Domain.Products.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("category_id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<Guid>("ManufacturerId")
                        .HasColumnType("uuid")
                        .HasColumnName("manufacturer_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric")
                        .HasColumnName("price");

                    b.Property<int>("StockQuantity")
                        .HasColumnType("integer")
                        .HasColumnName("stock_quantity");

                    b.HasKey("Id")
                        .HasName("pk_products");

                    b.HasIndex("CategoryId")
                        .HasDatabaseName("ix_products_category_id");

                    b.HasIndex("ManufacturerId")
                        .HasDatabaseName("ix_products_manufacturer_id");

                    b.ToTable("products", (string)null);
                });

            modelBuilder.Entity("Domain.Products.ProductImage", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("file_path");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.HasKey("Id")
                        .HasName("pk_product_image");

                    b.HasIndex("ProductId")
                        .HasDatabaseName("ix_product_image_product_id");

                    b.ToTable("product_image", (string)null);
                });

            modelBuilder.Entity("Domain.RefreshTokens.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date")
                        .HasDefaultValueSql("timezone('utc', now())");

                    b.Property<DateTime>("ExpiredDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expired_date")
                        .HasDefaultValueSql("timezone('utc', now())");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("boolean")
                        .HasColumnName("is_used");

                    b.Property<string>("JwtId")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("jwt_id");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)")
                        .HasColumnName("token");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_refresh_tokens");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_refresh_tokens_user_id");

                    b.ToTable("refresh_tokens", (string)null);
                });

            modelBuilder.Entity("ProductUser", b =>
                {
                    b.Property<Guid>("FavoriteProductsId")
                        .HasColumnType("uuid")
                        .HasColumnName("favorite_products_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("FavoriteProductsId", "UserId")
                        .HasName("pk_user_favorite_products");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_favorite_products_user_id");

                    b.ToTable("user_favorite_products", (string)null);
                });

            modelBuilder.Entity("RoleUser", b =>
                {
                    b.Property<string>("RolesId")
                        .HasColumnType("text")
                        .HasColumnName("roles_id");

                    b.Property<Guid>("UsersId")
                        .HasColumnType("uuid")
                        .HasColumnName("users_id");

                    b.HasKey("RolesId", "UsersId")
                        .HasName("pk_user_roles");

                    b.HasIndex("UsersId")
                        .HasDatabaseName("ix_user_roles_users_id");

                    b.ToTable("user_roles", (string)null);

                    b.HasData(
                        new
                        {
                            RolesId = "Administrator",
                            UsersId = new Guid("82601646-59b1-453b-8eb9-a9e93ec366ad")
                        },
                        new
                        {
                            RolesId = "User",
                            UsersId = new Guid("f5c43cd7-16e7-4740-8ad0-4b779b55e1be")
                        });
                });

            modelBuilder.Entity("CategoryManufacturer", b =>
                {
                    b.HasOne("Domain.Categories.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_categories_manufacturers_categories_categories_id");

                    b.HasOne("Domain.Manufacturers.Manufacturer", null)
                        .WithMany()
                        .HasForeignKey("ManufacturersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_categories_manufacturers_manufacturers_manufacturers_id");
                });

            modelBuilder.Entity("Domain.Authentications.Users.UserImage", b =>
                {
                    b.HasOne("Domain.Authentications.Users.User", "User")
                        .WithOne("UserImage")
                        .HasForeignKey("Domain.Authentications.Users.UserImage", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_images_users_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.CartItems.CartItem", b =>
                {
                    b.HasOne("Domain.Orders.Order", "Order")
                        .WithMany("Cart")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_orders_carts_id");

                    b.HasOne("Domain.Products.Product", "Product")
                        .WithMany("CartItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_cart_items_products_product_id");

                    b.HasOne("Domain.Authentications.Users.User", "User")
                        .WithMany("Cart")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_cart_items_users_user_id");

                    b.Navigation("Order");

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Orders.Order", b =>
                {
                    b.HasOne("Domain.Orders.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_orders_statuses_id");

                    b.HasOne("Domain.Authentications.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_orders_users_id");

                    b.Navigation("Status");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Products.Product", b =>
                {
                    b.HasOne("Domain.Categories.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_products_categories_category_id");

                    b.HasOne("Domain.Manufacturers.Manufacturer", "Manufacturer")
                        .WithMany()
                        .HasForeignKey("ManufacturerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_products_manufacturers_manufacturer_id");

                    b.OwnsOne("Domain.Products.PCComponents.ComponentCharacteristic", "ComponentCharacteristic", b1 =>
                        {
                            b1.Property<Guid>("ProductId")
                                .HasColumnType("uuid");

                            b1.HasKey("ProductId");

                            b1.ToTable("products");

                            b1.ToJson("component_characteristics");

                            b1.WithOwner()
                                .HasForeignKey("ProductId")
                                .HasConstraintName("fk_products_products_id");

                            b1.OwnsOne("Domain.Products.PCComponents.CPU", "Cpu", b2 =>
                                {
                                    b2.Property<Guid>("ComponentCharacteristicProductId")
                                        .HasColumnType("uuid");

                                    b2.Property<decimal>("BaseClock")
                                        .HasColumnType("decimal(5, 2)")
                                        .HasAnnotation("Relational:JsonPropertyName", "baseClock");

                                    b2.Property<decimal>("BoostClock")
                                        .HasColumnType("decimal(5, 2)")
                                        .HasAnnotation("Relational:JsonPropertyName", "boostClock");

                                    b2.Property<int>("Cores")
                                        .HasColumnType("integer")
                                        .HasAnnotation("Relational:JsonPropertyName", "cores");

                                    b2.Property<string>("Model")
                                        .IsRequired()
                                        .HasColumnType("text")
                                        .HasAnnotation("Relational:JsonPropertyName", "model");

                                    b2.Property<string>("Socket")
                                        .IsRequired()
                                        .HasColumnType("text")
                                        .HasAnnotation("Relational:JsonPropertyName", "socket");

                                    b2.Property<int>("Threads")
                                        .HasColumnType("integer")
                                        .HasAnnotation("Relational:JsonPropertyName", "threads");

                                    b2.HasKey("ComponentCharacteristicProductId");

                                    b2.ToTable("products");

                                    b2.ToJson("component_characteristics");

                                    b2.WithOwner()
                                        .HasForeignKey("ComponentCharacteristicProductId")
                                        .HasConstraintName("fk_products_products_component_characteristic_product_id");
                                });

                            b1.OwnsOne("Domain.Products.PCComponents.Case", "Case", b2 =>
                                {
                                    b2.Property<Guid>("ComponentCharacteristicProductId")
                                        .HasColumnType("uuid");

                                    b2.Property<string>("CompartmentDescription")
                                        .IsRequired()
                                        .HasColumnType("text")
                                        .HasAnnotation("Relational:JsonPropertyName", "compartmentDescription");

                                    b2.Property<string>("CoolingDescription")
                                        .IsRequired()
                                        .HasColumnType("text")
                                        .HasAnnotation("Relational:JsonPropertyName", "coolingSystem");

                                    b2.Property<string>("FormFactor")
                                        .IsRequired()
                                        .HasColumnType("text")
                                        .HasAnnotation("Relational:JsonPropertyName", "formFactor");

                                    b2.Property<int>("NumberOfFans")
                                        .HasColumnType("integer")
                                        .HasAnnotation("Relational:JsonPropertyName", "numberOfFans");

                                    b2.Property<string>("PortsDescription")
                                        .IsRequired()
                                        .HasColumnType("text")
                                        .HasAnnotation("Relational:JsonPropertyName", "portsDescription");

                                    b2.HasKey("ComponentCharacteristicProductId");

                                    b2.ToTable("products");

                                    b2.ToJson("component_characteristics");

                                    b2.WithOwner()
                                        .HasForeignKey("ComponentCharacteristicProductId")
                                        .HasConstraintName("fk_products_products_component_characteristic_product_id");
                                });

                            b1.OwnsOne("Domain.Products.PCComponents.Cooler", "Cooler", b2 =>
                                {
                                    b2.Property<Guid>("ComponentCharacteristicProductId")
                                        .HasColumnType("uuid");

                                    b2.Property<int>("FanAmount")
                                        .HasColumnType("integer")
                                        .HasAnnotation("Relational:JsonPropertyName", "fanAmount");

                                    b2.Property<string>("FanSupply")
                                        .IsRequired()
                                        .HasColumnType("text")
                                        .HasAnnotation("Relational:JsonPropertyName", "fanSupply");

                                    b2.Property<int>("Fanspeed")
                                        .HasColumnType("integer")
                                        .HasAnnotation("Relational:JsonPropertyName", "fanSpeed");

                                    b2.Property<string>("Material")
                                        .IsRequired()
                                        .HasColumnType("text")
                                        .HasAnnotation("Relational:JsonPropertyName", "material");

                                    b2.Property<int>("MaxTDP")
                                        .HasColumnType("integer")
                                        .HasAnnotation("Relational:JsonPropertyName", "maxTdp");

                                    b2.Property<int>("Voltage")
                                        .HasColumnType("integer")
                                        .HasAnnotation("Relational:JsonPropertyName", "voltage");

                                    b2.HasKey("ComponentCharacteristicProductId");

                                    b2.ToTable("products");

                                    b2.ToJson("component_characteristics");

                                    b2.WithOwner()
                                        .HasForeignKey("ComponentCharacteristicProductId")
                                        .HasConstraintName("fk_products_products_component_characteristic_product_id");
                                });

                            b1.OwnsOne("Domain.Products.PCComponents.GPU", "Gpu", b2 =>
                                {
                                    b2.Property<Guid>("ComponentCharacteristicProductId")
                                        .HasColumnType("uuid");

                                    b2.Property<decimal>("BoostClock")
                                        .HasColumnType("decimal(6, 2)")
                                        .HasAnnotation("Relational:JsonPropertyName", "boostClock");

                                    b2.Property<decimal>("CoreClock")
                                        .HasColumnType("decimal(6, 2)")
                                        .HasAnnotation("Relational:JsonPropertyName", "coreClock");

                                    b2.Property<string>("FormFactor")
                                        .IsRequired()
                                        .HasColumnType("text")
                                        .HasAnnotation("Relational:JsonPropertyName", "formFactor");

                                    b2.Property<int>("MemorySize")
                                        .HasColumnType("integer")
                                        .HasAnnotation("Relational:JsonPropertyName", "memorySize");

                                    b2.Property<string>("MemoryType")
                                        .IsRequired()
                                        .HasColumnType("text")
                                        .HasAnnotation("Relational:JsonPropertyName", "memoryType");

                                    b2.Property<string>("Model")
                                        .IsRequired()
                                        .HasColumnType("text")
                                        .HasAnnotation("Relational:JsonPropertyName", "model");

                                    b2.HasKey("ComponentCharacteristicProductId");

                                    b2.ToTable("products");

                                    b2.ToJson("component_characteristics");

                                    b2.WithOwner()
                                        .HasForeignKey("ComponentCharacteristicProductId")
                                        .HasConstraintName("fk_products_products_component_characteristic_product_id");
                                });

                            b1.OwnsOne("Domain.Products.PCComponents.HDD", "Hdd", b2 =>
                                {
                                    b2.Property<Guid>("ComponentCharacteristicProductId")
                                        .HasColumnType("uuid");

                                    b2.Property<string>("FormFactor")
                                        .IsRequired()
                                        .HasColumnType("text")
                                        .HasAnnotation("Relational:JsonPropertyName", "formFactor");

                                    b2.Property<int>("MemoryAmount")
                                        .HasColumnType("integer")
                                        .HasAnnotation("Relational:JsonPropertyName", "memoryAmount");

                                    b2.Property<int>("ReadSpeed")
                                        .HasColumnType("integer")
                                        .HasAnnotation("Relational:JsonPropertyName", "readSpeed");

                                    b2.Property<float>("Voltage")
                                        .HasColumnType("real")
                                        .HasAnnotation("Relational:JsonPropertyName", "voltage");

                                    b2.Property<int>("WriteSpeed")
                                        .HasColumnType("integer")
                                        .HasAnnotation("Relational:JsonPropertyName", "writeSpeed");

                                    b2.HasKey("ComponentCharacteristicProductId");

                                    b2.ToTable("products");

                                    b2.ToJson("component_characteristics");

                                    b2.WithOwner()
                                        .HasForeignKey("ComponentCharacteristicProductId")
                                        .HasConstraintName("fk_products_products_component_characteristic_product_id");
                                });

                            b1.OwnsOne("Domain.Products.PCComponents.Motherboard", "Motherboard", b2 =>
                                {
                                    b2.Property<Guid>("ComponentCharacteristicProductId")
                                        .HasColumnType("uuid");

                                    b2.Property<string>("AudioDescription")
                                        .IsRequired()
                                        .HasColumnType("text")
                                        .HasAnnotation("Relational:JsonPropertyName", "audioDescription");

                                    b2.Property<string>("ExternalConnectorsDescription")
                                        .IsRequired()
                                        .HasColumnType("text")
                                        .HasAnnotation("Relational:JsonPropertyName", "externalConnectorsDescription");

                                    b2.Property<string>("FormFactor")
                                        .IsRequired()
                                        .HasColumnType("text")
                                        .HasAnnotation("Relational:JsonPropertyName", "formFactor");

                                    b2.Property<string>("NetworkDescription")
                                        .IsRequired()
                                        .HasColumnType("text")
                                        .HasAnnotation("Relational:JsonPropertyName", "networkDescription");

                                    b2.Property<string>("PowerDescription")
                                        .IsRequired()
                                        .HasColumnType("text")
                                        .HasAnnotation("Relational:JsonPropertyName", "powerDescription");

                                    b2.Property<string>("RAMDescription")
                                        .IsRequired()
                                        .HasColumnType("text")
                                        .HasAnnotation("Relational:JsonPropertyName", "ramDescription");

                                    b2.Property<string>("Socket")
                                        .IsRequired()
                                        .HasColumnType("text")
                                        .HasAnnotation("Relational:JsonPropertyName", "socket");

                                    b2.HasKey("ComponentCharacteristicProductId");

                                    b2.ToTable("products");

                                    b2.ToJson("component_characteristics");

                                    b2.WithOwner()
                                        .HasForeignKey("ComponentCharacteristicProductId")
                                        .HasConstraintName("fk_products_products_component_characteristic_product_id");
                                });

                            b1.OwnsOne("Domain.Products.PCComponents.PSU", "Psu", b2 =>
                                {
                                    b2.Property<Guid>("ComponentCharacteristicProductId")
                                        .HasColumnType("uuid");

                                    b2.Property<string>("Connectors")
                                        .IsRequired()
                                        .HasColumnType("text")
                                        .HasAnnotation("Relational:JsonPropertyName", "connectors");

                                    b2.Property<string>("FanTypeAndSize")
                                        .IsRequired()
                                        .HasColumnType("text")
                                        .HasAnnotation("Relational:JsonPropertyName", "fanTypeAndSize");

                                    b2.Property<string>("InputVoltageRange")
                                        .IsRequired()
                                        .HasColumnType("text")
                                        .HasAnnotation("Relational:JsonPropertyName", "inputVoltageRange");

                                    b2.Property<string>("PowerCapacity")
                                        .IsRequired()
                                        .HasColumnType("text")
                                        .HasAnnotation("Relational:JsonPropertyName", "powerCapacity");

                                    b2.Property<string>("Protections")
                                        .IsRequired()
                                        .HasColumnType("text")
                                        .HasAnnotation("Relational:JsonPropertyName", "protections");

                                    b2.HasKey("ComponentCharacteristicProductId");

                                    b2.ToTable("products");

                                    b2.ToJson("component_characteristics");

                                    b2.WithOwner()
                                        .HasForeignKey("ComponentCharacteristicProductId")
                                        .HasConstraintName("fk_products_products_component_characteristic_product_id");
                                });

                            b1.OwnsOne("Domain.Products.PCComponents.RAM", "Ram", b2 =>
                                {
                                    b2.Property<Guid>("ComponentCharacteristicProductId")
                                        .HasColumnType("uuid");

                                    b2.Property<string>("FormFactor")
                                        .IsRequired()
                                        .HasColumnType("text")
                                        .HasAnnotation("Relational:JsonPropertyName", "formFactor");

                                    b2.Property<int>("MemoryAmount")
                                        .HasColumnType("integer")
                                        .HasAnnotation("Relational:JsonPropertyName", "memoryAmount");

                                    b2.Property<float>("MemoryBandwidth")
                                        .HasColumnType("real")
                                        .HasAnnotation("Relational:JsonPropertyName", "memoryBandwidth");

                                    b2.Property<int>("MemorySpeed")
                                        .HasColumnType("integer")
                                        .HasAnnotation("Relational:JsonPropertyName", "memorySpeed");

                                    b2.Property<string>("MemoryType")
                                        .IsRequired()
                                        .HasColumnType("text")
                                        .HasAnnotation("Relational:JsonPropertyName", "memoryType");

                                    b2.Property<float>("Voltage")
                                        .HasColumnType("real")
                                        .HasAnnotation("Relational:JsonPropertyName", "voltage");

                                    b2.HasKey("ComponentCharacteristicProductId");

                                    b2.ToTable("products");

                                    b2.ToJson("component_characteristics");

                                    b2.WithOwner()
                                        .HasForeignKey("ComponentCharacteristicProductId")
                                        .HasConstraintName("fk_products_products_component_characteristic_product_id");
                                });

                            b1.OwnsOne("Domain.Products.PCComponents.SSD", "Ssd", b2 =>
                                {
                                    b2.Property<Guid>("ComponentCharacteristicProductId")
                                        .HasColumnType("uuid");

                                    b2.Property<string>("FormFactor")
                                        .IsRequired()
                                        .HasColumnType("text")
                                        .HasAnnotation("Relational:JsonPropertyName", "formFactor");

                                    b2.Property<int>("MaxTBW")
                                        .HasColumnType("integer")
                                        .HasAnnotation("Relational:JsonPropertyName", "maxTbw");

                                    b2.Property<int>("MemoryAmount")
                                        .HasColumnType("integer")
                                        .HasAnnotation("Relational:JsonPropertyName", "memoryAmount");

                                    b2.Property<int>("ReadSpeed")
                                        .HasColumnType("integer")
                                        .HasAnnotation("Relational:JsonPropertyName", "readSpeed");

                                    b2.Property<int>("WriteSpeed")
                                        .HasColumnType("integer")
                                        .HasAnnotation("Relational:JsonPropertyName", "writeSpeed");

                                    b2.HasKey("ComponentCharacteristicProductId");

                                    b2.ToTable("products");

                                    b2.ToJson("component_characteristics");

                                    b2.WithOwner()
                                        .HasForeignKey("ComponentCharacteristicProductId")
                                        .HasConstraintName("fk_products_products_component_characteristic_product_id");
                                });

                            b1.Navigation("Case");

                            b1.Navigation("Cooler");

                            b1.Navigation("Cpu");

                            b1.Navigation("Gpu");

                            b1.Navigation("Hdd");

                            b1.Navigation("Motherboard");

                            b1.Navigation("Psu");

                            b1.Navigation("Ram");

                            b1.Navigation("Ssd");
                        });

                    b.Navigation("Category");

                    b.Navigation("ComponentCharacteristic")
                        .IsRequired();

                    b.Navigation("Manufacturer");
                });

            modelBuilder.Entity("Domain.Products.ProductImage", b =>
                {
                    b.HasOne("Domain.Products.Product", "Product")
                        .WithMany("Images")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_product_images_products_id");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Domain.RefreshTokens.RefreshToken", b =>
                {
                    b.HasOne("Domain.Authentications.Users.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_refresh_tokens_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ProductUser", b =>
                {
                    b.HasOne("Domain.Products.Product", null)
                        .WithMany()
                        .HasForeignKey("FavoriteProductsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_favorite_products_products_favorite_products_id");

                    b.HasOne("Domain.Authentications.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_favorite_products_users_user_id");
                });

            modelBuilder.Entity("RoleUser", b =>
                {
                    b.HasOne("Domain.Authentications.Roles.Role", null)
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_roles_roles_roles_id");

                    b.HasOne("Domain.Authentications.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_roles_users_users_id");
                });

            modelBuilder.Entity("Domain.Authentications.Users.User", b =>
                {
                    b.Navigation("Cart");

                    b.Navigation("RefreshTokens");

                    b.Navigation("UserImage");
                });

            modelBuilder.Entity("Domain.Orders.Order", b =>
                {
                    b.Navigation("Cart");
                });

            modelBuilder.Entity("Domain.Products.Product", b =>
                {
                    b.Navigation("CartItems");

                    b.Navigation("Images");
                });
#pragma warning restore 612, 618
        }
    }
}
