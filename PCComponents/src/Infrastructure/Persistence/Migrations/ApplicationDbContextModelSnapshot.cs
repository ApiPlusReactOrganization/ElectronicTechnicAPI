// <auto-generated />
using System;
using System.Collections.Generic;
using Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Authentications.Roles.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_roles");

                    b.ToTable("roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "User",
                            Name = "User"
                        },
                        new
                        {
                            Id = "Administrator",
                            Name = "Administrator"
                        });
                });

            modelBuilder.Entity("Domain.Authentications.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("Image")
                        .HasColumnType("text")
                        .HasColumnName("image");

                    b.Property<string>("Name")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)")
                        .HasColumnName("name");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.ToTable("users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("84da1939-bc9a-4270-9ed4-253e28cf0f81"),
                            Email = "admin@example.com",
                            Name = "admin",
                            PasswordHash = "wA6CToNJF8tbW9U6wX2e1w==:AckPrtzfcQ/BeUB/+X/rIWiQcxmTpf7EaT9jab/BThs="
                        },
                        new
                        {
                            Id = new Guid("299f3c4f-8537-428a-b1e8-eb0794bc6e49"),
                            Email = "user@example.com",
                            Name = "user",
                            PasswordHash = "PvpQ0/xa69pXsyublcJ1lw==:F4Uw34hFvVb820linGngxtWLqdTqzNFwUvnz+O3knjw="
                        });
                });

            modelBuilder.Entity("Domain.Categories.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_categories");

                    b.ToTable("categories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("443b51a2-cd7e-4930-8772-a52d5756a786"),
                            Name = "Processor"
                        },
                        new
                        {
                            Id = new Guid("60d465fc-72cc-49e5-bf36-48bdd839e0fd"),
                            Name = "Computer case"
                        },
                        new
                        {
                            Id = new Guid("719d528a-571d-43ea-aabb-2fad0bd83929"),
                            Name = "Graphics Card"
                        },
                        new
                        {
                            Id = new Guid("854c71f0-2c55-4277-8453-98ef121511e2"),
                            Name = "Motherboard"
                        },
                        new
                        {
                            Id = new Guid("5260ee46-19ea-4084-a9ea-c49146077d54"),
                            Name = "Psu"
                        },
                        new
                        {
                            Id = new Guid("51d2f9df-1904-4bb3-8c31-e5732a3e5da7"),
                            Name = "Ram"
                        },
                        new
                        {
                            Id = new Guid("35427fb9-c82e-4f8b-8ce7-bf5f6bb3476d"),
                            Name = "Cooler"
                        },
                        new
                        {
                            Id = new Guid("33a0e59a-97f1-406e-b379-22e54cbe14d5"),
                            Name = "Hdd"
                        },
                        new
                        {
                            Id = new Guid("34ca2b06-3f33-40a6-9f22-3c966508661e"),
                            Name = "Sdd"
                        });
                });

            modelBuilder.Entity("Domain.Manufacturers.Manufacturer", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_manufacturers");

                    b.ToTable("manufacturers", (string)null);
                });

            modelBuilder.Entity("Domain.Products.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("category_id");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<Guid>("ManufacturerId")
                        .HasColumnType("uuid")
                        .HasColumnName("manufacturer_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric")
                        .HasColumnName("price");

                    b.Property<int>("StockQuantity")
                        .HasColumnType("integer")
                        .HasColumnName("stock_quantity");

                    b.HasKey("Id")
                        .HasName("pk_products");

                    b.HasIndex("CategoryId")
                        .HasDatabaseName("ix_products_category_id");

                    b.HasIndex("ManufacturerId")
                        .HasDatabaseName("ix_products_manufacturer_id");

                    b.ToTable("products", (string)null);
                });

            modelBuilder.Entity("RoleUser", b =>
                {
                    b.Property<string>("RolesId")
                        .HasColumnType("text")
                        .HasColumnName("roles_id");

                    b.Property<Guid>("UsersId")
                        .HasColumnType("uuid")
                        .HasColumnName("users_id");

                    b.HasKey("RolesId", "UsersId")
                        .HasName("pk_user_roles");

                    b.HasIndex("UsersId")
                        .HasDatabaseName("ix_user_roles_users_id");

                    b.ToTable("userRoles", (string)null);

                    b.HasData(
                        new
                        {
                            RolesId = "Administrator",
                            UsersId = new Guid("84da1939-bc9a-4270-9ed4-253e28cf0f81")
                        },
                        new
                        {
                            RolesId = "User",
                            UsersId = new Guid("299f3c4f-8537-428a-b1e8-eb0794bc6e49")
                        });
                });

            modelBuilder.Entity("Domain.Products.Product", b =>
                {
                    b.HasOne("Domain.Categories.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_products_categories_category_id");

                    b.HasOne("Domain.Manufacturers.Manufacturer", "Manufacturer")
                        .WithMany()
                        .HasForeignKey("ManufacturerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_products_manufacturers_manufacturer_id");

                    b.OwnsOne("Domain.Products.ComponentCharacteristic", "ComponentCharacteristic", b1 =>
                        {
                            b1.Property<Guid>("ProductId")
                                .HasColumnType("uuid");

                            b1.HasKey("ProductId");

                            b1.ToTable("products");

                            b1.ToJson("component_characteristics");

                            b1.WithOwner()
                                .HasForeignKey("ProductId")
                                .HasConstraintName("fk_products_products_id");

                            b1.OwnsOne("Domain.Products.CPU", "Cpu", b2 =>
                                {
                                    b2.Property<Guid>("ComponentCharacteristicProductId")
                                        .HasColumnType("uuid");

                                    b2.Property<decimal>("BaseClock")
                                        .HasColumnType("decimal(5, 2)")
                                        .HasAnnotation("Relational:JsonPropertyName", "base clock");

                                    b2.Property<decimal>("BoostClock")
                                        .HasColumnType("decimal(5, 2)")
                                        .HasAnnotation("Relational:JsonPropertyName", "boost clock");

                                    b2.Property<int>("Cores")
                                        .HasColumnType("integer")
                                        .HasAnnotation("Relational:JsonPropertyName", "cores");

                                    b2.Property<string>("Model")
                                        .IsRequired()
                                        .HasColumnType("text")
                                        .HasAnnotation("Relational:JsonPropertyName", "model");

                                    b2.Property<string>("Socket")
                                        .IsRequired()
                                        .HasColumnType("text")
                                        .HasAnnotation("Relational:JsonPropertyName", "socket");

                                    b2.Property<int>("Threads")
                                        .HasColumnType("integer")
                                        .HasAnnotation("Relational:JsonPropertyName", "threads");

                                    b2.HasKey("ComponentCharacteristicProductId");

                                    b2.ToTable("products");

                                    b2.ToJson("component_characteristics");

                                    b2.WithOwner()
                                        .HasForeignKey("ComponentCharacteristicProductId")
                                        .HasConstraintName("fk_products_products_component_characteristic_product_id");
                                });

                            b1.OwnsOne("Domain.Products.Case", "Case", b2 =>
                                {
                                    b2.Property<Guid>("ComponentCharacteristicProductId")
                                        .HasColumnType("uuid");

                                    b2.Property<string>("CoolingSystem")
                                        .IsRequired()
                                        .HasColumnType("text")
                                        .HasAnnotation("Relational:JsonPropertyName", "cooling system");

                                    b2.Property<string>("FormFactor")
                                        .IsRequired()
                                        .HasColumnType("text")
                                        .HasAnnotation("Relational:JsonPropertyName", "form factor");

                                    b2.Property<int>("NumberOfFans")
                                        .HasColumnType("integer")
                                        .HasAnnotation("Relational:JsonPropertyName", "number of fans");

                                    b2.HasKey("ComponentCharacteristicProductId");

                                    b2.ToTable("products");

                                    b2.ToJson("component_characteristics");

                                    b2.WithOwner()
                                        .HasForeignKey("ComponentCharacteristicProductId")
                                        .HasConstraintName("fk_products_products_component_characteristic_product_id");
                                });

                            b1.OwnsOne("Domain.Products.Cooler", "Cooler", b2 =>
                                {
                                    b2.Property<Guid>("ComponentCharacteristicProductId")
                                        .HasColumnType("uuid");

                                    b2.Property<int>("FanAmount")
                                        .HasColumnType("integer")
                                        .HasAnnotation("Relational:JsonPropertyName", "fan amount");

                                    b2.Property<string>("FanSupply")
                                        .IsRequired()
                                        .HasColumnType("text")
                                        .HasAnnotation("Relational:JsonPropertyName", "fan supply");

                                    b2.Property<int>("Fanspeed")
                                        .HasColumnType("integer")
                                        .HasAnnotation("Relational:JsonPropertyName", "fan speed");

                                    b2.Property<string>("Material")
                                        .IsRequired()
                                        .HasColumnType("text")
                                        .HasAnnotation("Relational:JsonPropertyName", "material");

                                    b2.Property<int>("MaxTDP")
                                        .HasColumnType("integer")
                                        .HasAnnotation("Relational:JsonPropertyName", "max tdp");

                                    b2.Property<List<string>>("Sockets")
                                        .IsRequired()
                                        .HasColumnType("text[]")
                                        .HasAnnotation("Relational:JsonPropertyName", "sockets");

                                    b2.Property<int>("Voltage")
                                        .HasColumnType("integer")
                                        .HasAnnotation("Relational:JsonPropertyName", "voltage");

                                    b2.HasKey("ComponentCharacteristicProductId");

                                    b2.ToTable("products");

                                    b2.ToJson("component_characteristics");

                                    b2.WithOwner()
                                        .HasForeignKey("ComponentCharacteristicProductId")
                                        .HasConstraintName("fk_products_products_component_characteristic_product_id");
                                });

                            b1.OwnsOne("Domain.Products.GPU", "Gpu", b2 =>
                                {
                                    b2.Property<Guid>("ComponentCharacteristicProductId")
                                        .HasColumnType("uuid");

                                    b2.Property<decimal>("BoostClock")
                                        .HasColumnType("decimal(6, 2)")
                                        .HasAnnotation("Relational:JsonPropertyName", "boost clock");

                                    b2.Property<decimal>("CoreClock")
                                        .HasColumnType("decimal(6, 2)")
                                        .HasAnnotation("Relational:JsonPropertyName", "core clock");

                                    b2.Property<string>("FormFactor")
                                        .IsRequired()
                                        .HasColumnType("text")
                                        .HasAnnotation("Relational:JsonPropertyName", "form factor");

                                    b2.Property<int>("MemorySize")
                                        .HasColumnType("integer")
                                        .HasAnnotation("Relational:JsonPropertyName", "memory size");

                                    b2.Property<string>("MemoryType")
                                        .IsRequired()
                                        .HasColumnType("text")
                                        .HasAnnotation("Relational:JsonPropertyName", "memory type");

                                    b2.Property<string>("Model")
                                        .IsRequired()
                                        .HasColumnType("text")
                                        .HasAnnotation("Relational:JsonPropertyName", "model");

                                    b2.HasKey("ComponentCharacteristicProductId");

                                    b2.ToTable("products");

                                    b2.ToJson("component_characteristics");

                                    b2.WithOwner()
                                        .HasForeignKey("ComponentCharacteristicProductId")
                                        .HasConstraintName("fk_products_products_component_characteristic_product_id");
                                });

                            b1.OwnsOne("Domain.Products.HDD", "Hdd", b2 =>
                                {
                                    b2.Property<Guid>("ComponentCharacteristicProductId")
                                        .HasColumnType("uuid");

                                    b2.Property<string>("FormFactor")
                                        .IsRequired()
                                        .HasColumnType("text")
                                        .HasAnnotation("Relational:JsonPropertyName", "form factor");

                                    b2.Property<int>("MemoryAmount")
                                        .HasColumnType("integer")
                                        .HasAnnotation("Relational:JsonPropertyName", "memory amount");

                                    b2.Property<int>("ReadSpeed")
                                        .HasColumnType("integer")
                                        .HasAnnotation("Relational:JsonPropertyName", "read speed");

                                    b2.Property<float>("Voltage")
                                        .HasColumnType("real")
                                        .HasAnnotation("Relational:JsonPropertyName", "voltage");

                                    b2.Property<int>("WriteSpeed")
                                        .HasColumnType("integer")
                                        .HasAnnotation("Relational:JsonPropertyName", "write speed");

                                    b2.HasKey("ComponentCharacteristicProductId");

                                    b2.ToTable("products");

                                    b2.ToJson("component_characteristics");

                                    b2.WithOwner()
                                        .HasForeignKey("ComponentCharacteristicProductId")
                                        .HasConstraintName("fk_products_products_component_characteristic_product_id");
                                });

                            b1.OwnsOne("Domain.Products.Motherboard", "Motherboard", b2 =>
                                {
                                    b2.Property<Guid>("ComponentCharacteristicProductId")
                                        .HasColumnType("uuid");

                                    b2.Property<string>("AudioDescription")
                                        .IsRequired()
                                        .HasColumnType("text")
                                        .HasAnnotation("Relational:JsonPropertyName", "audio description");

                                    b2.Property<string>("ExternalConnectorsDescription")
                                        .IsRequired()
                                        .HasColumnType("text")
                                        .HasAnnotation("Relational:JsonPropertyName", "external connectors description");

                                    b2.Property<string>("FormFactor")
                                        .IsRequired()
                                        .HasColumnType("text")
                                        .HasAnnotation("Relational:JsonPropertyName", "form factor");

                                    b2.Property<string>("NetworkDescription")
                                        .IsRequired()
                                        .HasColumnType("text")
                                        .HasAnnotation("Relational:JsonPropertyName", "network description");

                                    b2.Property<string>("PowerDescription")
                                        .IsRequired()
                                        .HasColumnType("text")
                                        .HasAnnotation("Relational:JsonPropertyName", "power description");

                                    b2.Property<string>("RAMDescription")
                                        .IsRequired()
                                        .HasColumnType("text")
                                        .HasAnnotation("Relational:JsonPropertyName", "RAM description");

                                    b2.Property<string>("Socket")
                                        .IsRequired()
                                        .HasColumnType("text")
                                        .HasAnnotation("Relational:JsonPropertyName", "socket");

                                    b2.HasKey("ComponentCharacteristicProductId");

                                    b2.ToTable("products");

                                    b2.ToJson("component_characteristics");

                                    b2.WithOwner()
                                        .HasForeignKey("ComponentCharacteristicProductId")
                                        .HasConstraintName("fk_products_products_component_characteristic_product_id");
                                });

                            b1.OwnsOne("Domain.Products.PSU", "Psu", b2 =>
                                {
                                    b2.Property<Guid>("ComponentCharacteristicProductId")
                                        .HasColumnType("uuid");

                                    b2.Property<string>("Connectors")
                                        .IsRequired()
                                        .HasColumnType("text")
                                        .HasAnnotation("Relational:JsonPropertyName", "connectors");

                                    b2.Property<string>("FanTypeAndSize")
                                        .IsRequired()
                                        .HasColumnType("text")
                                        .HasAnnotation("Relational:JsonPropertyName", "fan type and size");

                                    b2.Property<string>("InputVoltageRange")
                                        .IsRequired()
                                        .HasColumnType("text")
                                        .HasAnnotation("Relational:JsonPropertyName", "input voltage range");

                                    b2.Property<string>("PowerCapacity")
                                        .IsRequired()
                                        .HasColumnType("text")
                                        .HasAnnotation("Relational:JsonPropertyName", "power capacity");

                                    b2.Property<string>("Protections")
                                        .IsRequired()
                                        .HasColumnType("text")
                                        .HasAnnotation("Relational:JsonPropertyName", "protections");

                                    b2.HasKey("ComponentCharacteristicProductId");

                                    b2.ToTable("products");

                                    b2.ToJson("component_characteristics");

                                    b2.WithOwner()
                                        .HasForeignKey("ComponentCharacteristicProductId")
                                        .HasConstraintName("fk_products_products_component_characteristic_product_id");
                                });

                            b1.OwnsOne("Domain.Products.RAM", "Ram", b2 =>
                                {
                                    b2.Property<Guid>("ComponentCharacteristicProductId")
                                        .HasColumnType("uuid");

                                    b2.Property<string>("FormFactor")
                                        .IsRequired()
                                        .HasColumnType("text")
                                        .HasAnnotation("Relational:JsonPropertyName", "form factor");

                                    b2.Property<int>("MemoryAmount")
                                        .HasColumnType("integer")
                                        .HasAnnotation("Relational:JsonPropertyName", "memory amount");

                                    b2.Property<float>("MemoryBandwidth")
                                        .HasColumnType("real")
                                        .HasAnnotation("Relational:JsonPropertyName", "memory bandwidth");

                                    b2.Property<int>("MemorySpeed")
                                        .HasColumnType("integer")
                                        .HasAnnotation("Relational:JsonPropertyName", "memory speed");

                                    b2.Property<string>("MemoryType")
                                        .IsRequired()
                                        .HasColumnType("text")
                                        .HasAnnotation("Relational:JsonPropertyName", "memory type");

                                    b2.Property<float>("Voltage")
                                        .HasColumnType("real")
                                        .HasAnnotation("Relational:JsonPropertyName", "voltage");

                                    b2.HasKey("ComponentCharacteristicProductId");

                                    b2.ToTable("products");

                                    b2.ToJson("component_characteristics");

                                    b2.WithOwner()
                                        .HasForeignKey("ComponentCharacteristicProductId")
                                        .HasConstraintName("fk_products_products_component_characteristic_product_id");
                                });

                            b1.OwnsOne("Domain.Products.SDD", "Sdd", b2 =>
                                {
                                    b2.Property<Guid>("ComponentCharacteristicProductId")
                                        .HasColumnType("uuid");

                                    b2.Property<string>("FormFactor")
                                        .IsRequired()
                                        .HasColumnType("text")
                                        .HasAnnotation("Relational:JsonPropertyName", "form factor");

                                    b2.Property<int>("MaxTBW")
                                        .HasColumnType("integer")
                                        .HasAnnotation("Relational:JsonPropertyName", "max tbw");

                                    b2.Property<int>("MemoryAmount")
                                        .HasColumnType("integer")
                                        .HasAnnotation("Relational:JsonPropertyName", "memory amount");

                                    b2.Property<int>("ReadSpeed")
                                        .HasColumnType("integer")
                                        .HasAnnotation("Relational:JsonPropertyName", "read speed");

                                    b2.Property<int>("WriteSpeed")
                                        .HasColumnType("integer")
                                        .HasAnnotation("Relational:JsonPropertyName", "write speed");

                                    b2.HasKey("ComponentCharacteristicProductId");

                                    b2.ToTable("products");

                                    b2.ToJson("component_characteristics");

                                    b2.WithOwner()
                                        .HasForeignKey("ComponentCharacteristicProductId")
                                        .HasConstraintName("fk_products_products_component_characteristic_product_id");
                                });

                            b1.Navigation("Case");

                            b1.Navigation("Cooler");

                            b1.Navigation("Cpu");

                            b1.Navigation("Gpu");

                            b1.Navigation("Hdd");

                            b1.Navigation("Motherboard");

                            b1.Navigation("Psu");

                            b1.Navigation("Ram");

                            b1.Navigation("Sdd");
                        });

                    b.Navigation("Category");

                    b.Navigation("ComponentCharacteristic")
                        .IsRequired();

                    b.Navigation("Manufacturer");
                });

            modelBuilder.Entity("RoleUser", b =>
                {
                    b.HasOne("Domain.Authentications.Roles.Role", null)
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_roles_roles_roles_id");

                    b.HasOne("Domain.Authentications.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_roles_users_users_id");
                });
#pragma warning restore 612, 618
        }
    }
}
